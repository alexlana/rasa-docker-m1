# The image tagged with the 'spacy-de' suffix
ARG IMAGE_BASE_NAME
ARG BASE_IMAGE_HASH
ARG BASE_BUILDER_IMAGE_HASH

FROM ${IMAGE_BASE_NAME}:base-builder-${BASE_BUILDER_IMAGE_HASH} as builder

# copy files
COPY . /build/
COPY docker/configs/config_pretrained_embeddings_spacy_de.yml /build/config.yml

# change working directory
WORKDIR /build

# install dependencies
RUN python -m venv /opt/venv && \
  . /opt/venv/bin/activate && pip install --no-cache-dir -U "pip==21.*"

##################################################################
## ARM64 - INI
RUN pip3 install --upgrade pip
RUN python3 -m pip install --upgrade setuptools
RUN pip3 install --no-cache-dir  --force-reinstall -Iv grpcio

RUN wget https://github.com/bazelbuild/bazel/releases/download/4.2.1/bazel-4.2.1-linux-arm64
RUN chmod +x bazel-4.2.1-linux-arm64
RUN mv bazel-4.2.1-linux-arm64 /usr/local/bin/bazel
RUN bazel version
RUN which bazel

RUN apt-get update -qq && apt-get install -y libhdf5-dev pkg-config
RUN pip install h5py
ADD ["https://github.com/KumaTea/tensorflow-aarch64/releases/download/v2.6/tensorflow-2.6.0-cp38-cp38-linux_aarch64.whl", "/tensorflow-2.6.0-cp38-cp38-linux_aarch64.whl"]
RUN python3 -m pip install --no-cache-dir /tensorflow-2.6.0-cp38-cp38-linux_aarch64.whl
RUN rm /tensorflow-2.6.0-cp38-cp38-linux_aarch64.whl
COPY ./_repo/bashrc /etc/bash.bashrc
RUN chmod a+rwx /etc/bash.bashrc

RUN apt-get install -y wget

RUN wget https://github.com/Qengineering/TensorFlow-Addons-Raspberry-Pi_64-bit/raw/main/tensorflow_addons-0.14.0.dev0-cp38-cp38-linux_aarch64.whl
RUN python3 -m pip install --no-cache-dir tensorflow_addons-0.14.0.dev0-cp38-cp38-linux_aarch64.whl
RUN rm tensorflow_addons-0.14.0.dev0-cp38-cp38-linux_aarch64.whl

# RUN apt-get install -y git
# RUN pip install --upgrade numpy
# RUN pip install --upgrade pip setuptools wheel
## ARM64 - FIM
##################################################################

RUN . /opt/venv/bin/activate && poetry install --extras spacy --no-dev --no-root --no-interaction
RUN . /opt/venv/bin/activate && poetry build -f wheel -n && \
  pip install --no-deps dist/*.whl && \
  rm -rf dist *.egg-info

# make sure we use the virtualenv
ENV PATH="/opt/venv/bin:$PATH"

RUN python -m spacy download de_core_news_sm

# start a new build stage
FROM ${IMAGE_BASE_NAME}:base-${BASE_IMAGE_HASH} as runner

# copy everything from /opt
COPY --from=builder /opt/venv /opt/venv

# make sure we use the virtualenv
ENV PATH="/opt/venv/bin:$PATH"

# set HOME environment variable
ENV HOME=/app

# update permissions & change user to not run as root
WORKDIR /app
RUN chgrp -R 0 /app && chmod -R g=u /app && chmod o+wr /app
USER 1001

# Create a volume for temporary data
VOLUME /tmp

# change shell
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# the entry point
#EXPOSE 5005
#ENTRYPOINT ["rasa"]
#CMD ["--help"]
